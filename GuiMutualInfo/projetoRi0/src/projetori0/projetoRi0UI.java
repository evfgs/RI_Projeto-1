/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetori0;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author User
 */
public class projetoRi0UI extends javax.swing.JFrame {

    /**
     * Creates new form projetoRi0UI
     */
    public projetoRi0UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 400));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Procura"));

        jLabel1.setText("Diretor:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Idioma:");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Elenco:");

        jLabel4.setText("Legenda:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Título:");

        jLabel6.setText("País:");

        jLabel7.setText("Pesquisa:");

        jButton1.setText("Procurar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(151, 151, 151))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1))
        );

        jScrollPane1.setViewportView(jList1);

        jTabbedPane1.addTab("Resultados da Pesquisa", jScrollPane1);

        jScrollPane2.setViewportView(jList2);

        jTabbedPane1.addTab("Sugestões de Pesquisa", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int[] arrayfyDocList(String docList){
        docList = docList.replaceAll("/\\d+","").replaceAll(", ",",");
        docList = docList.substring(docList.indexOf("[")+1, docList.indexOf("]"));
        return Arrays.stream(docList.split(",")).mapToInt(Integer::parseInt).toArray();
    }
    
    public String[] arrayfyDocListString(String docList){
        docList = docList.replaceAll("/\\d+","").replaceAll(", ",",");
        docList = docList.substring(docList.indexOf("[")+1, docList.indexOf("]"));
        return docList.split(",");
    }
    
    public Double simpleTermFrequency(String[] line){
        return Double.parseDouble(line[1].replaceAll("c", "")) * 0.0001;
    }
    
    public HashMap<String, Double[]> wordsInSameDoc(String[] givenLine, Double frequency)
            throws FileNotFoundException, IOException{
        
        RandomAccessFile invIndex = new RandomAccessFile("C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\term.txt", "r");
        String readerLine;
        HashMap<String, Double[]> map = new HashMap();
        String[] docList = arrayfyDocListString(givenLine[2]); 
        
        for (String docList1 : docList) {
            
            while ((readerLine = invIndex.readLine())!=null) {
                
                if ((readerLine.contains(docList1)) && !(readerLine.contains(givenLine[0]))) {
                    
                    String[] line = readerLine.split("\\\\");
                    if(map.get(line[0])!=null){
                        
                        Double[] temp = (Double[]) map.get(line[0]);
                        temp[1]+= 0.0001;
                        temp[2] = Math.log(temp[1]/(temp[0]*frequency))/Math.log(2);
                        map.replace(line[0], temp);
                        
                    } else{
                        
                        Double[] temp = new Double[3];
                        temp[0] = simpleTermFrequency(line);
                        temp[1] = 0.0001;
                        temp[2] = Math.log(temp[1]/(temp[0]*frequency))/Math.log(2);
                        map.put(line[0], temp);
                    }
                }
            }
            invIndex.seek(0);
        }
        return map;
    }
    
    public String[][] mutualInformationOnline(String word) throws FileNotFoundException, IOException{
        
        BufferedReader invIndex = new BufferedReader(new FileReader("C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\term.txt"));
        String readerLine;
        String[][] candidates = new String[3][2];
        
        while((readerLine = invIndex.readLine())!=null){
            
            String[] line = readerLine.split("\\\\");
            if(line[0].equals(word)){
                
                HashMap<String, Double[]> coWords = wordsInSameDoc(line, simpleTermFrequency(line));
                int size = 0;
                for(String key: coWords.keySet()){
                    
                    if (size <= 2){
                        
                        candidates[size][0] = key;
                        candidates[size][1] = coWords.get(key)[2].toString();
                        size+=1;
                    }else{
                        int i =0;
                        boolean swiped = false;
                        while(i<=2 && !swiped){
                            if((coWords.get(key)[2] > Double.parseDouble(candidates[i][1]))){
                                candidates[i][0] = key;
                                candidates[i][1] = coWords.get(key)[2].toString();
                                swiped = true;
                            } else{
                                i++;   
                            }
                        }
                    } 
                }
            }
        }
        return candidates;
    }
    
    public String[] mutualInformationOffline(String word) throws FileNotFoundException, IOException{
        
        BufferedReader invIndex = new BufferedReader(new FileReader("C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\mutualInformationTerm.txt"));
        String readerLine;
        String[] candidates = new String[3];
        boolean found = false;
        while(((readerLine = invIndex.readLine())!=null) && !found){
            
            String[] line = readerLine.split("/");
            if(line[0].equals(word)){
                
                candidates = line[1].split(",");
                found = true;
            }
        }
        return candidates;
    }
    
    public DefaultListModel rankedFormatedDisplay(String search){
        DefaultListModel model = new DefaultListModel();
//        ranking function returning String of commaSpaceSeparated docIDs using search
        String[] searchParameters = search.split(",\\s+");//should be return of runking function variable instead of "search"
        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(new FileReader(
                    "C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\result.json"));
            JSONArray jsonArray = (JSONArray) obj;
            for(int i = 0; i<=searchParameters.length; i++){
                for(int j = 0; j<jsonArray.size(); j++){
                    JSONObject jsonObject = (JSONObject) jsonArray.get(j);
//                    if ((jsonObject.get("_id_").equals(searchParameters[i])) && (jsonObject.get("Título") != null)){
                    if (jsonObject.get("_id_").equals("bahiaP"+j)&&(jsonObject.get("Título") != null)){
                        String item = "<html>";
                        item += "<h3>"+jsonObject.get("Título")+"</h3>" ;
                        
                        Set<?> keySet = jsonObject.keySet();
                        Iterator<?> iterator = keySet.iterator();
                        int alternate = 0;
                        
                        do { 
                            String key = iterator.next().toString();
                            if(alternate%2==0){
                                item += ("<b>" +key+ "</b>" + ":&nbsp;&nbsp;&nbsp;&nbsp;" + jsonObject.get(key)+
                                        "&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;");
                                alternate++;
                            }
                            else{
                                item += ("<b>"+key+"</b>" + ":&nbsp;&nbsp;&nbsp;&nbsp;" + jsonObject.get(key)+"<br/>");
                                alternate++;
                            }

                        } while (iterator.hasNext());
                        
                        item +="<br/>&nbsp;";
                        model.addElement(item);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return model;
    }
    
    public DefaultListModel rankedMIDisplayOnline(String searchParameters) 
            throws FileNotFoundException, IOException{
        
        DefaultListModel model = new DefaultListModel();
        String[] tokenWords = searchParameters.trim().split("\\s+");
        for (String tokenWord : tokenWords) {
            
            int nullCounter =0;
            String item = "<html><b>Palavra:</b>&nbsp;&nbsp;" + "\""+ tokenWord+"\""+"<br/><b>Sugestões:&nbsp;&nbsp;</b>";
            String[][] mi = mutualInformationOnline(tokenWord);
            for (String[] mi1 : mi) {
                
                if (mi1[0] != null) {
                    
                    item += "\""+ tokenWord+"&nbsp;" + mi1[0] + "\"" + "&nbsp;&nbsp;&nbsp;";
                    
                } else {
                   
                    nullCounter++;
                }
            }
            if(nullCounter==3){
                
                item = "<html><h4>Palavra Não Encontrada.</h4>";
            }
            item +="<br/>";
            model.addElement(item);
        }
        return model;
    }
    
    public DefaultListModel rankedMIDisplayOffline(String searchParameters) 
            throws FileNotFoundException, IOException{
       
        DefaultListModel model = new DefaultListModel();
        String[] tokenWords = searchParameters.trim().split("\\s+");
        for (String tokenWord : tokenWords) {
           
            int nullCounter =0;
            String item = "<html><b>Palavra:</b>&nbsp;&nbsp;" + "\""+ tokenWord+"\""+"<br/><b>Sugestões:&nbsp;&nbsp;</b>";
            String[] mi = mutualInformationOffline(tokenWord);
            for (String mi1 : mi) {
                
                if (mi1 != null) {
                    
                    item += "\""+ tokenWord+"&nbsp;" + mi1 + "\"" + "&nbsp;&nbsp;&nbsp;";
                    
                } else {
                    
                    nullCounter++;
                }
            }
            if(nullCounter==3){
                
                item = "<html><h4>Palavra Não Encontrada.</h4>";
            }
            item +="<br/>";
            model.addElement(item);
        }
        return model;
    }
    
    public void rankedMIDocument() throws FileNotFoundException, IOException{
        
        BufferedReader invIndex = new BufferedReader(new FileReader("C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\term.txt"));
        String readerLine;
        try (BufferedWriter writer = new BufferedWriter( new FileWriter("C:\\Users\\emanu\\Desktop\\RI\\FUNCIONAL\\Ze\\projetoRi0\\src\\projetori0\\filesFolder\\mutualInformationTerm.txt"))) {
            while((readerLine = invIndex.readLine())!=null){
                String[] line = readerLine.split("\\\\");
                String[][] mi = mutualInformationOnline(line[0]);
                String toBeWritten = line[0] + "/" +mi[0][0]+","+mi[1][0]+","+mi[2][0]+"\n";
                writer.write(toBeWritten);
                writer.flush();
            }
            writer.close();
        }

    }
            
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String searchParameters = "";
        if (!(jTextField1.getText().equals(""))){
            searchParameters += ("diretor." + jTextField1.getText().trim().replaceAll("\\s+"," diretor.") + " ");
        }
        if (!(jTextField2.getText().equals(""))){
            searchParameters += ("idioma." + jTextField2.getText().trim().replaceAll("\\s+"," idioma.") + " ");
        }
        if (!(jTextField3.getText().equals(""))){
            searchParameters += ("elenco." + jTextField3.getText().trim().replaceAll("\\s+"," elenco.") + " ");
        }
        if (!(jTextField4.getText().equals(""))){
            searchParameters += ("legenda." + jTextField4.getText().trim().replaceAll("\\s+"," legenda.") + " ");
        }
        if (!(jTextField8.getText().equals(""))){
            searchParameters += ("titulo." + jTextField8.getText().trim().replaceAll("\\s+"," titulo.") + " ");
        }
        if (!(jTextField6.getText().equals(""))){
            searchParameters += ("pais." + jTextField6.getText().trim().replaceAll("\\s+"," pais.")) + " ";
        }
        if (!(jTextField7.getText().equals(""))){
            searchParameters += jTextField7.getText().trim();
        }
        
        jList1.setModel(rankedFormatedDisplay(searchParameters));//lowercased
        
//        try {
//            jList2.setModel(rankedMIDisplayOnline(searchParameters));//lowercased
//        } catch (IOException ex) {
//            Logger.getLogger(projetoRi0UI.class.getName()).log(Level.SEVERE, null, ex);
//        }

//        try {
//            rankedMIDocument();
//        } catch (IOException ex) {
//            Logger.getLogger(projetoRi0UI.class.getName()).log(Level.SEVERE, null, ex);
//        }

        try {
            jList2.setModel(rankedMIDisplayOffline(searchParameters));
        } catch (IOException ex) {
            Logger.getLogger(projetoRi0UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(projetoRi0UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(projetoRi0UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(projetoRi0UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(projetoRi0UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new projetoRi0UI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
